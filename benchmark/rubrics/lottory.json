{
  "repo": "lottory",
  "tests": [
    {
      "id": "check_python37",
      "type": "commands_exist",
      "params": {
        "names": ["python3.7", "pip"]
      }
    },
    {
      "id": "check_python37_version",
      "type": "output_contains",
      "params": {
        "command": "python3.7 --version",
        "contains": ["3.7"]
      },
      "timeout": 10,
      "score": 2
    },
    {
      "id": "check_build_tools",
      "type": "commands_exist",
      "params": {
        "names": ["gcc", "make", "git", "curl", "wget"]
      }
    },
    {
      "id": "check_python3",
      "type": "commands_exist",
      "params": {
        "names": ["python3"]
      }
    },
    {
      "id": "check_project_structure",
      "type": "dirs_exist",
      "params": {
        "paths": [
          "archs",
          "archs/mnist",
          "archs/cifar10",
          "archs/cifar100"
        ]
      },
      "score": 3
    },
    {
      "id": "check_key_files",
      "type": "files_exist",
      "params": {
        "paths": [
          "main.py",
          "utils.py",
          "combine_plots.py",
          "requirements.txt",
          "README.md",
          ".gitignore"
        ]
      },
      "score": 2
    },
    {
      "id": "check_mnist_architectures",
      "type": "files_exist",
      "params": {
        "paths": [
          "archs/mnist/fc1.py",
          "archs/mnist/LeNet5.py",
          "archs/mnist/AlexNet.py",
          "archs/mnist/vgg.py",
          "archs/mnist/resnet.py"
        ]
      },
      "score": 2
    },
    {
      "id": "check_cifar10_architectures",
      "type": "files_exist",
      "params": {
        "paths": [
          "archs/cifar10/fc1.py",
          "archs/cifar10/LeNet5.py",
          "archs/cifar10/AlexNet.py",
          "archs/cifar10/vgg.py",
          "archs/cifar10/resnet.py",
          "archs/cifar10/densenet.py"
        ]
      },
      "score": 2
    },
    {
      "id": "check_cifar100_architectures",
      "type": "files_exist",
      "params": {
        "paths": [
          "archs/cifar100/fc1.py",
          "archs/cifar100/LeNet5.py",
          "archs/cifar100/AlexNet.py",
          "archs/cifar100/vgg.py",
          "archs/cifar100/resnet.py"
        ]
      },
      "score": 2
    },
    {
      "id": "check_python_env",
      "type": "envvar_set",
      "params": {
        "name": "PYTHONPATH"
      },
      "score": 1
    },
    {
      "id": "check_virtual_env",
      "type": "envvar_set",
      "params": {
        "name": "VIRTUAL_ENV"
      },
      "score": 1
    },
    {
      "id": "check_python37_in_path",
      "type": "output_contains",
      "params": {
        "command": "echo $PATH",
        "contains": ["python3.7"]
      },
      "timeout": 10,
      "score": 1
    },
    {
      "id": "test_python37_execution",
      "type": "run_command",
      "params": {
        "command": "python3.7 -c \"print('Python 3.7 works')\""
      },
      "timeout": 30,
      "score": 2
    },
    {
      "id": "test_pip_functionality",
      "type": "run_command",
      "params": {
        "command": "pip --version"
      },
      "timeout": 30,
      "score": 1
    },
    {
      "id": "test_requirements_dependencies",
      "type": "file_contains",
      "params": {
        "path": "requirements.txt",
        "contains": ["torch==1.2.0", "torchvision==0.4.0", "numpy==1.17.2", "matplotlib==3.1.1", "seaborn==0.9.0", "tensorboardX==1.8", "tqdm==4.36.1"]
      },
      "score": 3
    },
    {
      "id": "test_main_py_syntax",
      "type": "run_command",
      "params": {
        "command": "python3.7 -m py_compile main.py"
      },
      "timeout": 30,
      "score": 2
    },
    {
      "id": "test_main_py_imports",
      "type": "file_contains",
      "params": {
        "path": "main.py",
        "contains": ["import torch", "import torchvision", "import matplotlib", "import seaborn"]
      },
      "score": 2
    },
    {
      "id": "test_utils_py_syntax",
      "type": "run_command",
      "params": {
        "command": "python3.7 -m py_compile utils.py"
      },
      "timeout": 30,
      "score": 1
    },
    {
      "id": "test_combine_plots_syntax",
      "type": "run_command",
      "params": {
        "command": "python3.7 -m py_compile combine_plots.py"
      },
      "timeout": 30,
      "score": 1
    },
    {
      "id": "test_readme_content",
      "type": "file_contains",
      "params": {
        "path": "README.md",
        "contains": ["Lottery Ticket Hypothesis", "Requirements", "How to run", "Datasets and Architectures"]
      },
      "score": 2
    },
    {
      "id": "test_gitignore_content",
      "type": "file_contains",
      "params": {
        "path": ".gitignore",
        "contains": ["*.pyc", "__pycache__"]
      },
      "score": 1
    },
    {
      "id": "test_pytorch_import",
      "type": "run_command",
      "params": {
        "command": "python3.7 -c \"import torch; print('PyTorch works')\""
      },
      "timeout": 30,
      "score": 2
    },
    {
      "id": "test_torchvision_import",
      "type": "run_command",
      "params": {
        "command": "python3.7 -c \"import torchvision; print('torchvision works')\""
      },
      "timeout": 30,
      "score": 2
    },
    {
      "id": "test_matplotlib_import",
      "type": "run_command",
      "params": {
        "command": "python3.7 -c \"import matplotlib; print('matplotlib works')\""
      },
      "timeout": 30,
      "score": 1
    },
    {
      "id": "test_seaborn_import",
      "type": "run_command",
      "params": {
        "command": "python3.7 -c \"import seaborn; print('seaborn works')\""
      },
      "timeout": 30,
      "score": 1
    },
    {
      "id": "test_numpy_import",
      "type": "run_command",
      "params": {
        "command": "python3.7 -c \"import numpy; print('numpy works')\""
      },
      "timeout": 30,
      "score": 1
    },
    {
      "id": "test_pandas_import",
      "type": "run_command",
      "params": {
        "command": "python3.7 -c \"import pandas; print('pandas works')\""
      },
      "timeout": 30,
      "score": 1
    }
  ]
}
